// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceAlphaClient is the client API for ServiceAlpha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAlphaClient interface {
	GetText(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type serviceAlphaClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAlphaClient(cc grpc.ClientConnInterface) ServiceAlphaClient {
	return &serviceAlphaClient{cc}
}

func (c *serviceAlphaClient) GetText(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/ServiceAlpha/GetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAlphaServer is the server API for ServiceAlpha service.
// All implementations must embed UnimplementedServiceAlphaServer
// for forward compatibility
type ServiceAlphaServer interface {
	GetText(context.Context, *Message) (*Message, error)
	mustEmbedUnimplementedServiceAlphaServer()
}

// UnimplementedServiceAlphaServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAlphaServer struct {
}

func (UnimplementedServiceAlphaServer) GetText(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedServiceAlphaServer) mustEmbedUnimplementedServiceAlphaServer() {}

// UnsafeServiceAlphaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAlphaServer will
// result in compilation errors.
type UnsafeServiceAlphaServer interface {
	mustEmbedUnimplementedServiceAlphaServer()
}

func RegisterServiceAlphaServer(s grpc.ServiceRegistrar, srv ServiceAlphaServer) {
	s.RegisterService(&ServiceAlpha_ServiceDesc, srv)
}

func _ServiceAlpha_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAlphaServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceAlpha/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAlphaServer).GetText(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAlpha_ServiceDesc is the grpc.ServiceDesc for ServiceAlpha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAlpha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceAlpha",
	HandlerType: (*ServiceAlphaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetText",
			Handler:    _ServiceAlpha_GetText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/serviceAlpha.proto",
}
